/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.citec.dal.visual.service;

import de.citec.dal.hal.provider.MotionProvider;
import de.citec.jul.exception.CouldNotPerformException;
import de.citec.jul.exception.printer.ExceptionPrinter;
import de.citec.jul.exception.InvalidStateException;
import de.citec.jul.exception.printer.LogLevel;
import de.citec.jul.processing.StringProcessor;
import java.awt.Color;

/**
 *
 * @author mpohling
 */
public class MotionProviderPanel extends AbstractServicePanel<MotionProvider> {

    /**
     * Creates new form BrightnessService
     *
     * @throws de.citec.jul.exception.InstantiationException
     */
    public MotionProviderPanel() throws de.citec.jul.exception.InstantiationException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        motionStatePanel = new javax.swing.JPanel();
        motionStatusLabel = new javax.swing.JLabel();

        motionStatePanel.setBackground(new java.awt.Color(204, 204, 204));
        motionStatePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        motionStatePanel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        motionStatusLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        motionStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        motionStatusLabel.setText("MotionState");
        motionStatusLabel.setFocusable(false);
        motionStatusLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout motionStatePanelLayout = new javax.swing.GroupLayout(motionStatePanel);
        motionStatePanel.setLayout(motionStatePanelLayout);
        motionStatePanelLayout.setHorizontalGroup(
            motionStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(motionStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );
        motionStatePanelLayout.setVerticalGroup(
            motionStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(motionStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(motionStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(motionStatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel motionStatePanel;
    private javax.swing.JLabel motionStatusLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void updateDynamicComponents() {
        try {
            switch (getService().getMotion().getValue()) {
                case MOVEMENT:
                    motionStatusLabel.setForeground(Color.BLACK);
                    motionStatePanel.setBackground(Color.GREEN.darker());
                    break;
                case NO_MOVEMENT:
                    motionStatusLabel.setForeground(Color.BLACK);
                    motionStatePanel.setBackground(Color.LIGHT_GRAY);
                    break;
                case UNKNOWN:
                    motionStatusLabel.setForeground(Color.BLACK);
                    motionStatePanel.setBackground(Color.ORANGE.darker());
                    break;
                default:
                    throw new InvalidStateException("State[" + getService().getMotion().getValue() + "] is unknown.");
            }
            motionStatusLabel.setText("Current MotionState = " + StringProcessor.transformUpperCaseToCamelCase(getService().getMotion().getValue().name()) + " last movement: "+getService().getMotion().getLastMovement());
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(ex, logger, LogLevel.ERROR);
        }
    }
}
