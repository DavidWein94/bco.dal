/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.citec.dal.visual.unit;

import de.citec.dm.remote.DeviceRegistryRemote;
import de.citec.jul.exception.CouldNotPerformException;
import de.citec.jul.exception.CouldNotTransformException;
import de.citec.jul.exception.InstantiationException;
import de.citec.jul.exception.MultiException;
import de.citec.jul.exception.NotAvailableException;
import de.citec.jul.extension.rsb.scope.ScopeTransformer;
import de.citec.jul.pattern.Observable;
import de.citec.jul.pattern.Observer;
import java.io.NotActiveException;
import java.util.ArrayList;
import org.slf4j.LoggerFactory;
import rst.homeautomation.unit.UnitConfigType;
import rst.homeautomation.unit.UnitConfigType.UnitConfig;
import rst.homeautomation.unit.UnitTemplateType.UnitTemplate.UnitType;
import rst.rsb.ScopeType.Scope;

/**
 *
 * @author thuxohl
 */
public class UnitPanel extends javax.swing.JPanel {

    protected final org.slf4j.Logger logger = LoggerFactory.getLogger(getClass());

    private final Observable<UnitConfig> observable;

    private DeviceRegistryRemote registryRemote;

    /**
     * Creates new form UnitPanel
     *
     * @throws de.citec.jul.exception.InstantiationException
     */
    public UnitPanel() throws InstantiationException, InterruptedException {
        try {
            initComponents();
            observable = new Observable<>();
            this.registryRemote = new DeviceRegistryRemote();
            this.registryRemote.init();
            this.registryRemote.activate();

        } catch (CouldNotPerformException ex) {
            throw new InstantiationException(this, ex);
        }
    }

    public void addObserver(Observer<UnitConfig> observer) {
        observable.addObserver(observer);
    }

    public void removeObserver(Observer<UnitConfig> observer) {
        observable.removeObserver(observer);
    }

    public void fillComboBox(final UnitType unitType) {
        unitComboBox.removeAllItems();
        try {
            ArrayList<UnitContainer> unitNames = new ArrayList<>();

            for (UnitConfigType.UnitConfig unitConfig : registryRemote.getUnitConfigs(unitType)) {
                unitNames.add(new UnitContainer(unitConfig));
            }
            unitComboBox.setModel(new javax.swing.DefaultComboBoxModel(unitNames.toArray()));
            unitComboBox.setSelectedItem(0);
        } catch (CouldNotPerformException ex) {
            logger.error("Could not fill the UnitComboBox!", ex);
        }
    }

    public UnitConfig getUnitConfig() throws NotAvailableException {
        try {
            return ((UnitContainer) unitComboBox.getSelectedItem()).getUnitConfig();
        } catch (Exception ex) {
            throw new NotAvailableException("unit config");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        unitComboBox = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Unit"));

        unitComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unitComboBox, 0, 447, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void unitComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitComboBoxActionPerformed

        new Thread("ScopeUpdaterThread") {

            @Override
            public void run() {
                try {
                    if (unitComboBox.getSelectedItem() != null) {
                        observable.notifyObservers(((UnitContainer) unitComboBox.getSelectedItem()).getUnitConfig());
                    }
                } catch (MultiException ex) {
                    logger.error("Could not set the scope for this unit!", ex);
                }
                logger.debug(getName() + " finished successful.");
            }

        }.start();
    }//GEN-LAST:event_unitComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox unitComboBox;
    // End of variables declaration//GEN-END:variables

    class UnitContainer {

//        private final AbstractUnitController unit;
        private final UnitConfigType.UnitConfig unitConfig;

        public UnitContainer(UnitConfigType.UnitConfig unitConfig) {
            this.unitConfig = unitConfig;
        }

//        public AbstractUnitController getUnit() {
//            return unit;
//        }
        public UnitConfigType.UnitConfig getUnitConfig() {
            return unitConfig;
        }

        @Override
        public String toString() {
            try {
                return unitConfig.getLabel() + "@" + unitConfig.getPlacementConfig().getLocationConfig().getLabel() + " [" + ScopeTransformer.transform(unitConfig.getScope()) + "]";
            } catch (CouldNotTransformException ex) {
                return unitConfig.getLabel() + "@" + unitConfig.getPlacementConfig().getLocationConfig().getLabel() + "]";
            }
        }
    }
}
