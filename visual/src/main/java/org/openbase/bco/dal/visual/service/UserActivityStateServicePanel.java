package org.openbase.bco.dal.visual.service;

/*-
 * #%L
 * BCO DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2018 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.openbase.bco.dal.lib.layer.service.consumer.ConsumerService;
import org.openbase.bco.dal.lib.layer.service.operation.UserActivityStateOperationService;
import org.openbase.bco.dal.lib.layer.service.provider.UserActivityStateProviderService;
import org.openbase.bco.registry.remote.Registries;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.openbase.jul.pattern.Observable;
import rst.domotic.activity.UserActivityConfigType.UserActivityConfig;
import rst.domotic.registry.UserActivityRegistryDataType.UserActivityRegistryData;
import rst.domotic.state.UserActivityStateType.UserActivityState;

/**
 *
 * @author <a href="mailto:pLeminoq@openbase.org">Tamino Huxohl</a>
 */
public class UserActivityStateServicePanel extends AbstractServicePanel<UserActivityStateProviderService, ConsumerService, UserActivityStateOperationService> {

    /**
     * Creates new form UserActivityStateServicePanel
     *
     * @throws org.openbase.jul.exception.InstantiationException
     */
    public UserActivityStateServicePanel() throws org.openbase.jul.exception.InstantiationException {
        initComponents();
        initDynamicComponents();
    }
    
    private void initDynamicComponents() throws org.openbase.jul.exception.InstantiationException {
        try {
            Registries.getUserActivityRegistry(true);
            updateComboBoxModel();
            
            Registries.getUserActivityRegistry().addDataObserver((Observable<UserActivityRegistryData> source, UserActivityRegistryData data) -> {
                updateComboBoxModel();
            });
        } catch (CouldNotPerformException ex) {
            throw new org.openbase.jul.exception.InstantiationException(this, "Could not init dynamic components", ex);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    private void updateComboBoxModel() throws InterruptedException, CouldNotPerformException {
        Object selected = userActivityComboBox.getModel().getSelectedItem();
        
        List<UserActivityConfigHolder> userActivityConfigHolderList = new ArrayList<>();
        for (UserActivityConfig userActivityConfig : Registries.getUserActivityRegistry().getUserActivityConfigs()) {
            userActivityConfigHolderList.add(new UserActivityConfigHolder(userActivityConfig));
        }
        Collections.sort(userActivityConfigHolderList);
        userActivityComboBox.setModel(new DefaultComboBoxModel(userActivityConfigHolderList.toArray()));
        
        if (selected != null) {
            userActivityComboBox.getModel().setSelectedItem(selected);
        } else {
            userActivityComboBox.getModel().setSelectedItem(userActivityComboBox.getModel().getElementAt(0));
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userActivityStatePanel = new javax.swing.JPanel();
        userActivityStateLabel = new javax.swing.JLabel();
        userActivityComboBox = new javax.swing.JComboBox();

        userActivityStatePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        userActivityStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userActivityStateLabel.setText("UserActivityState");

        javax.swing.GroupLayout userActivityStatePanelLayout = new javax.swing.GroupLayout(userActivityStatePanel);
        userActivityStatePanel.setLayout(userActivityStatePanelLayout);
        userActivityStatePanelLayout.setHorizontalGroup(
            userActivityStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userActivityStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );
        userActivityStatePanelLayout.setVerticalGroup(
            userActivityStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userActivityStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        );

        userActivityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        userActivityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActivityComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userActivityStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(userActivityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(userActivityStatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userActivityComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void userActivityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActivityComboBoxActionPerformed
        Object selected = userActivityComboBox.getModel().getSelectedItem();
        if (!(selected instanceof UserActivityConfigHolder)) {
            return;
        }
        
        UserActivityConfigHolder selectedActivity = (UserActivityConfigHolder) selected;
        UserActivityState userActivityState = UserActivityState.newBuilder().setActivityId(selectedActivity.getUserActivityConfig().getId()).build();
        try {
            notifyActionProcessing(getOperationService().setUserActivityState(userActivityState));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not set user activity state!", ex), logger);
        }
    }//GEN-LAST:event_userActivityComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox userActivityComboBox;
    private javax.swing.JLabel userActivityStateLabel;
    private javax.swing.JPanel userActivityStatePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void updateDynamicComponents() {
        try {
            if (getProviderService().getUserActivityState().hasActivityId() && !getProviderService().getUserActivityState().getActivityId().isEmpty()) {
                UserActivityConfig userActivityConfig = Registries.getUserActivityRegistry().getUserActivityConfigById(getProviderService().getUserActivityState().getActivityId());
                userActivityComboBox.getModel().setSelectedItem(new UserActivityConfigHolder(userActivityConfig));
                userActivityStateLabel.setText("Current UserActivityState = " + userActivityConfig.getLabel());
            }
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(ex, logger);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    public static class UserActivityConfigHolder implements Comparable<UserActivityConfigHolder> {
        
        private final UserActivityConfig userActivityConfig;
        
        public UserActivityConfigHolder(final UserActivityConfig userActivityConfig) {
            this.userActivityConfig = userActivityConfig;
        }
        
        @Override
        public String toString() {
            return this.userActivityConfig.getLabel();
        }
        
        @Override
        public int compareTo(UserActivityConfigHolder o) {
            return this.userActivityConfig.getLabel().compareTo(o.getUserActivityConfig().getLabel());
        }
        
        public UserActivityConfig getUserActivityConfig() {
            return userActivityConfig;
        }
    }
}
