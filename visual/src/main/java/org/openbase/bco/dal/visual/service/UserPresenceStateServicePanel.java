package org.openbase.bco.dal.visual.service;

/*-
 * #%L
 * BCO DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2018 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import org.openbase.bco.dal.lib.layer.service.consumer.ConsumerService;
import org.openbase.bco.dal.lib.layer.service.operation.UserPresenceStateOperationService;
import org.openbase.bco.dal.lib.layer.service.provider.UserPresenceStateProviderService;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.InvalidStateException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.openbase.jul.processing.StringProcessor;
import rst.domotic.state.UserPresenceStateType.UserPresenceState;

/**
 *
 * @author <a href="mailto:pLeminoq@openbase.org">Tamino Huxohl</a>
 */
public class UserPresenceStateServicePanel extends AbstractServicePanel<UserPresenceStateProviderService, ConsumerService, UserPresenceStateOperationService> {

    /**
     * Creates new form UserActivityStateServicePanel
     *
     * @throws org.openbase.jul.exception.InstantiationException
     */
    public UserPresenceStateServicePanel() throws org.openbase.jul.exception.InstantiationException {
        initComponents();
        userPresenceStateComboBox.setModel(new DefaultComboBoxModel(UserPresenceState.State.values()));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userPresenceStatePanel = new javax.swing.JPanel();
        userPresenceStateLabel = new javax.swing.JLabel();
        userPresenceStateComboBox = new javax.swing.JComboBox();

        userPresenceStatePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        userPresenceStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userPresenceStateLabel.setText("UserActivityState");

        javax.swing.GroupLayout userPresenceStatePanelLayout = new javax.swing.GroupLayout(userPresenceStatePanel);
        userPresenceStatePanel.setLayout(userPresenceStatePanelLayout);
        userPresenceStatePanelLayout.setHorizontalGroup(
            userPresenceStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPresenceStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );
        userPresenceStatePanelLayout.setVerticalGroup(
            userPresenceStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPresenceStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        userPresenceStateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        userPresenceStateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userPresenceStateComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPresenceStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(userPresenceStateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(userPresenceStatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userPresenceStateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void userPresenceStateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userPresenceStateComboBoxActionPerformed
        UserPresenceState.State userPresenceState = (UserPresenceState.State) userPresenceStateComboBox.getModel().getSelectedItem();
        try {
            notifyActionProcessing(getOperationService().setUserPresenceState(userPresenceState));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not set user presence state!", ex), logger);
        }
    }//GEN-LAST:event_userPresenceStateComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox userPresenceStateComboBox;
    private javax.swing.JLabel userPresenceStateLabel;
    private javax.swing.JPanel userPresenceStatePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void updateDynamicComponents() {
        try {
            switch (getProviderService().getUserPresenceState().getValue()) {
                case AT_HOME:
                    userPresenceStateLabel.setForeground(Color.BLACK);
                    userPresenceStatePanel.setBackground(Color.GREEN.darker());
                    break;
                case AWAY:
                    userPresenceStateLabel.setForeground(Color.LIGHT_GRAY);
                    userPresenceStatePanel.setBackground(Color.GRAY.darker());
                    break;
                case SHORT_AT_HOME:
                    userPresenceStateLabel.setForeground(Color.BLACK);
                    userPresenceStatePanel.setBackground(Color.CYAN.brighter());
                    break;
                case SHORT_AWAY:
                    userPresenceStateLabel.setForeground(Color.BLACK);
                    userPresenceStatePanel.setBackground(Color.CYAN.darker());
                    break;
                case SOON_AT_HOME:
                    userPresenceStateLabel.setForeground(Color.BLACK);
                    userPresenceStatePanel.setBackground(Color.GREEN.darker().darker());
                    break;
                case SOON_AWAY:
                    userPresenceStateLabel.setForeground(Color.BLACK);
                    userPresenceStatePanel.setBackground(Color.GREEN.darker().darker());
                    break;
                case UNKNOWN:
                    userPresenceStateLabel.setForeground(Color.BLACK);
                    userPresenceStatePanel.setBackground(Color.ORANGE.darker());
                    break;
                default:
                    throw new InvalidStateException("State[" + getProviderService().getUserPresenceState().getValue() + "] is unknown.");
            }
            userPresenceStateComboBox.getModel().setSelectedItem(getProviderService().getUserPresenceState().getValue());
            userPresenceStateLabel.setText("Current UserPresenceState = " + StringProcessor.transformUpperCaseToCamelCase(getProviderService().getUserPresenceState().getValue().name()));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(ex, logger);
        }
    }
}
